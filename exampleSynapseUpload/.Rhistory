p
p$p.value
t.test(d2[2, idxNML], d2[2,idxSYM])
t.test(d2[, idxNML], d2[,idxSYM])
library(genefilter
)
library(genefilter)
install.packages(genefilter)
install.packages('genefilter')
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
source("http://bioconductor.org/biocLite.R")
biocLite("genefilter")
library(genefilter)
?rowttests
idxNML=grep('NML', colnames(d2))
idxNML
colnames(d2)
colnames(d2)[1]
split('.', colnames(d2)[1]
)
split('.', colnames(d2)[1])
split(colnames(d2)[1], '.')
split(colnames(d2)[1][1:3])
colnames(d2)[1][1:3]
colnames(d2)[1]
strsplit(colnames(d2)[1])
strsplit(colnames(d2)[1], '.')
strsplit(colnames(d2)[1], '.', fixed=T)
strsplit(colnames(d2)[1], '.', fixed=T)[0]
strsplit(colnames(d2)[1], '.', fixed=T)[[0]]
strsplit(colnames(d2)[1], '.', fixed=T)
strsplit(colnames(d2)[1], '.', fixed=T)[[1]]
strsplit(colnames(d2)[1], '.', fixed=T)[[1]][0]
strsplit(colnames(d2)[1], '.', fixed=T)[[1]][[0]]
strsplit(colnames(d2)[1], '.', fixed=T)[[1]][[1]]
lapply(strsplit(x), '.', fixed=T)[[1]][[1]], colnames(d2)
lapply(strsplit(x), '.', fixed=T)[[1]][[1]], colnames(d2))
lapply(colnames(d2), strsplit(x), '.', fixed=T)[[1]][[1]]
lapply(colnames(d2), function(x) strsplit(x), '.', fixed=T)[[1]][[1]]
lapply(colnames(d2), function(x) strsplit(x, '.', fixed=T)[[1]][[1]]
)
lapply(colnames(d2), function(x) {strsplit(x, '.', fixed=T)[[1]][[1]]})
lapply(colnames(d2), function(x) {strsplit(x, '.', fixed=T)})
strsplit(colnames(d2), '.', fixed=T)
strsplit(colnames(d2), '.', fixed=T)[[1]]
strsplit(colnames(d2), '.', fixed=T)[1]
strsplit(colnames(d2), '.', fixed=T)
?strsplit
unlist(strsplit(colnames(d2), '.', fixed=T))
unlist(strsplit(colnames(d2), '.', fixed=T))[1::2]
unlist(strsplit(colnames(d2), '.', fixed=T))[1,2,2]
unlist(strsplit(colnames(d2), '.', fixed=T))
strsplit(colnames(d2), '.', fixed=T))
strsplit(colnames(d2), '.', fixed=T)
do.call(rbind, strsplit(colnames(d2), '.', fixed=T))
do.call(rbind, strsplit(colnames(d2), '.', fixed=T))[,1]
as.factor(do.call(rbind, strsplit(colnames(d2), '.', fixed=T))[,1])
status<-as.factor(do.call(rbind, strsplit(colnames(d2), '.', fixed=T))[,1])
?colttests
rowFtests(d2, status)
results < - rowFtests(d2, status)
results <- rowFtests(d2, status)
colnames(results)
hist(results$p.value)
hist(log10(results$p.value))
min(results$p.value)
argmin(results$p.value)
arg.min(results$p.value)
?sort
sort(results$p.value)
sort(results$p.value, index.return=T)
sortIdx <-sort(results$p.value, index.return=T)
sortIdx$ix
d2[sortIdx$ix,]
sortIdx$x
d2[sortIdx$ix,][1]
d2[sortIdx$ix,][1,]
boxplot[d2[sortIdx$ix,][1,],status]
?boxplot
boxplot[y~status, d2[sortIdx$ix,][1,],status])
boxplot[d2[sortIdx$ix,][1,],status])
boxplot(d2[sortIdx$ix,][1,],status])
boxplot(d2[sortIdx$ix,][1,],status)
status
plot(d2[sortIdx$ix,][1,])
boxplot(d2[sortIdx$ix,][1,])
boxplot(d2[sortIdx$ix,][1,idxNML])
boxplot(d2[sortIdx$ix,][1,idxNML], d2[sortIdx$ix,][1, idxSYM])
boxplot(d2[sortIdx$ix,][1,idxNML], d2[sortIdx$ix,][1, idxSYM])
savehistory("~/Dropbox/Sage/log/20121127/sample_macrophage_work.Rhistory")
require(synapseClient)
synapseLogin('larsson.omberg@sagebase.org', 'syndabockidag')
loadEntity <- function(entity) {
entity <- getEntity(entity)
loadId <- entity$annotations$loadR
code <- downloadEntity(loadId)
source(file.path(code$cacheDir, code$files[[1]]))
load(entity$properties$id)
}
data <- loadEntity('syn1548156')
data
dim(data)
x=randn(10)
x=norm(10)
rnorm(10)
rnorm(10,10)
rnorm((10,10))
?rnorm(10,10)
rnorm(20)
as.matrix(rnorm(50), (10,5))
as.matrix?
)
?as.matrix
as.matrix(rnorm(50), 10,5)
as.matrix(rnorm(50), nrow=10, ncol=5)
as.matrix(rnorm(50), nrow=10, ncol=5)
rnorm(5)
as.matrix(rnorm(50), nrow=10, ncol=5)
replicate(10, rnorm(20))
dim(replicate(10, rnorm(20)) )
replicate(10, rnorm(20))
replicate(10, rnorm(20))
ent <- getEntity('syn1557007')
data <- replicate(10, rnorm(20))
ent <- addObject(ent, data)
storeEntity(ent)
data
downloadEntity('syn1557007')
ent <- downloadEntity('syn1557007')
ent
ent$files
load('/Users/lom/.synapseCache/python/syn1557007/archive.zip_unpacked/.R_OBJECTS/data.rbin')
load('/Users/lom/.synapseCache/python/syn1557007/archive.zip_unpacked/.R_OBJECTS/data.rbin')
ent$annotations$loadPython <-
)
downloadEntity('syn1548156')
loadEntity('syn1548156')
data <- loadEntity('syn1548156')
dim(data)
ent <- getEntity('syn1557007')
ent
data <- replicate(10, rnorm(20))
ent <- addObject(ent, data)
storeEntity(ent)
ent <- getEntity('syn1557007')
clear
downloadEntity('syn1548156')
loadEntity('syn1548156')
ent <- getEntity('syn1557007')
data <- replicate(10, rnorm(20))
ent <- addObject(ent, data)
storeEntity(ent)
install.packages('fpc')
require(synapseClient)
synapseLogin()
loadEntity('syn1416368')
ent -> loadEntity('syn1416368')
ent <- loadEntity('syn1416368')
ent$objects
stage<-ent$objects$metadata[["tumor_stage"]]
summary(stage)
require(synapseClient)
synapseLogin()
source('http://depot.sagebase.org/CRAN.R')
pkgInstall(c("synapseClient"))
synapseLogin()
require(synapseClient)
synapseLogin()
ent <- downloadEntity('syn1445790')
ent$cacheDir
ent$cacheDir, ent$files
ent$cacheDir; ent$files
path(ent$cacheDir, ent$files)
path.expand(ent$cacheDir, ent$files)
file.path(ent$cacheDir, ent$files)
file.copy(file.path(ent$cacheDir, ent$files), '~/')
file.copy(file.path(ent$cacheDir, ent$files), '~/')
extractClustersAndDistances <- function(results, runName) {
source('~/Dropbox/Sage/synapseDaemons/evalScript.R', echo=TRUE)
}
source('~/Dropbox/Sage/synapseDaemons/evalScript.R', echo=TRUE)
source('~/Dropbox/Sage/synapseDaemons/evalScript.R', echo=TRUE)
output
source('~/Dropbox/Sage/synapseDaemons/evalScript.R', echo=TRUE)
source('~/Dropbox/Sage/synapseDaemons/evalScript.R')
require(synapseclient)
require(synapseClient)
x<-read.delim('~/Downloads/test-output.csv')
summary(x)
names(x)
names(x)
names(x).split('.')
names(x)$split('.')
split('.', names(x))
split('.', names(x))
split(names(x), '.')
names(x)
x<-read.delim('~/Downloads/test-output.csv', header=TRUE)
names(x)
?read.delim
x<-read.delim('~/Downloads/test-output.csv', header=TRUE, separator=',')
x<-read.delim('~/Downloads/test-output.csv', header=TRUE, sep=',')
names(x)
summary(x)
plopt(x)
plot(x)
names(x)
x[device.axis=='z-rotation']
x[device.axis=='z-rotation']
x$device.axis=='z-rotation'
x[value[x$device.axis=='z-rotation']
]
x[x$device.axis=='z-rotation']
x[,x$device.axis=='z-rotation']
x[x$device.axis=='z-rotation',]
plot(x[value[x$device.axis=='z-rotation'])
plot(x[value[x$device.axis=='z-rotation',])
x[value[x$device.axis=='z-rotation',]
""
x[x$device.axis=='z-rotation',]
plot(x[x$device.axis=='z-rotation',])
plot(x[x$ =='z-rotation',])
plot(x[x$test =='EXP',]$value)
x[x$test =='EXP',]$value
x[x$test =='EXP',]
x[x$test=='EXP',]
x[x$test=='EXP',]
reshape
?reshape
reshape(x)
summary(x)
data.matrix(x)
summary(data.matrix(x))
count(data.matrix(x))
counts(data.matrix(x))
data.matrix(x))
data.matrix(x)
plot(x, method='jitter')
plot(women)
sum(x$test =='EST')
sum(x$test =='EST')
summary(x)
sum(x$metrix =='EST')
sum(x$metric =='EST')
sum(x$metric =='EXP')
sum(x$metric =='ABS')
sum(x$metric =='RMS
')
sum(x$metric =='RMS')
summary(x)
table(x)
table(x$device.axis)
split(x$device.axis, x$metric)
split(x$device.axis, x$value)
boxplot(split(x$device.axis, x$value))
boxplot(split(x$value, x$device.axis))
boxplot(split(log(x$value), x$device.axis))
boxplot(split(log(x$value+eps), x$device.axis))
eps
epsilon
boxplot(split(log(x$value+1e-8), x$device.axis))
table(x$device.axis)
boxplot(split(log(x$value+1e-8), x$version))
boxplot(split(log(x$value+1e-3), x$version))
boxplot(split(log(x$value+1e-4), x$metric))
boxplot(split(x$value, x$metric))
?boxplot
boxplot(split(log(x$value+1e-5), x$metric))
boxplot(split(log(x$value+1e-5), x$portion))
?split
boxplot(split(log(x$value+1e-5), x))
22000/12.
boxplot(split(log(x$value+1e-5), x[c(1,2),]))
boxplot(split(x$value, x[c(1,2),]))
?isplit
library(ggplot2)
qplot(value,metric,data=x,colour=version,geom="line",group=site)
qplot(value,metric,data=x,colour=version,geom="line",group=version)
qplot(metric,value,data=x,colour=version,geom="line",group=version)
qplot(metric,value,data=x,colour=version,geom="scatter",group=version)
qplot(metric,value,data=x,colour=version,group=version)
qplot(metric,value,data=x,colour=version,geom='jitter', group=version)
names(x)
qplot(test,value,data=x,colour=version,geom='jitter', group=version)
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=version)
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=version, log='y')
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=metric, log='y')
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=metric)
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=metric, log='y')
qplot(device.axis ,value,data=x,colour=version,geom='jitter', group=test, log='y')
names(x)
qplot(device.axis ,value,data=x,colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='RMS'],colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='RMS',],colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='EXP',],colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='EXP',],colour=portion,geom='jitter', group=test)
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y')
require(synapseClient)
x<-read.delim('~/Downloads/test-output.csv', header=TRUE, sep=',')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y')
library(ggplot2)
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y')
names(data)
colnames(data)
colnames(x)
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', group=test, log='y', facets=test)
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
qplot(device.axis ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
qplot(test ,value,data=x[x$metric=='ABS',],colour=portion,geom='jitter', log='y')
?glmnet
install.packages(c('glmnet'))
require(glmnet)
?glmnet
qu\()
q()
library(affy)
library(corpcor)
library(lattice)
library(limma)
library(caret)
library(glmnet)
library(snm)
library(synapseClient)
synapseLogin("larsson.omberg@sagebase.org","syndabockidag")
ccle_all <- loadEntity("syn1671195")
ccle_all <- ccle_all$objects$ccle_data
assign(x=names(ccle_all)[1],ccle_all[[1]])
assign(x=names(ccle_all)[2],ccle_all[[2]])
assign(x=names(ccle_all)[3],ccle_all[[3]])
assign(x=names(ccle_all)[4],ccle_all[[4]])
assign(x=names(ccle_all)[5],ccle_all[[5]])
assign(x=names(ccle_all)[6],ccle_all[[6]])
assign(x=names(ccle_drug)[1],ccle_drug[[1]])
assign(x=names(ccle_drug)[2],ccle_drug[[2]])
install.packages('synapseClient')
install.packages('synapseClient')
install.packages('synapseClient')
source('http://depot.sagebase.org/CRAN.R')
pkgInstall(c("synapseClient"))
library(synapseClient)
synapseLogin("larsson.omberg@sagebase.org","syndabockidag")
ccle_all <- loadEntity("syn1671195")
ccle_all <- ccle_all$objects$ccle_data
assign(x=names(ccle_all)[1],ccle_all[[1]])
assign(x=names(ccle_all)[2],ccle_all[[2]])
ccle_all <- loadEntity("syn1671195")
require(synapseClient)
require(BiocGenerics)
qry <- synapseQuery('select id, name from folder where folder.parentId=="syn1393205"')
synapseLogin
synapseLogin()
qry <- synapseQuery('select id, name from folder where folder.parentId=="syn1393205"')
# Find Ids for specific disease and combine into all
all=as.matrix(data.frame())
pos=0
for (i in 1:dim(qry)[1]) {
cancerQry <- synapseQuery(sprintf("select id, name from entity where entity.parentId=='%s'",  qry$folder.id[i]))
clinId <- cancerQry[grep("*_mergedClinical", cancerQry$entity.name),]
if (is.null(clinId))
next()
print(cancerQry)
print(clinId)
q<-loadEntity(clinId$entity.id)
metadata <- q$objects$metadata
#Fix the headers to remove references to specific diseases
names(metadata) <- sub('_BLCA|_BRCA|_CESC|_COAD|_DLBC|_GBM|_HNSC|_KIRC|_KIRP|_LAML|_LGG|_LIHC|_LUAD|_LUSC|_OV|_PAAD|_PRAD|_READ|_SARC|_SKCM|_STAD|_THCA|_UCEC', '_*',names(metadata), ignore.case=TRUE)
#Add column for cancertype
metadata$cancer = sub("_mergedClinical", "", clinId$entity.name)
#Combine with previous data
metadata <- as.matrix(metadata)
rownames(metadata) <- 1:nrow(metadata)+pos
pos <- pos + nrow(metadata)
all <- combine(all, metadata)
print(paste(clinId$entity.name, object.size(metadata)/1024^2, dim(metadata)))
print(dim(all))
}
install.packages('shiny')
install.packages('gdata')
install.packages('plyr')
install.packages('pheatmap')
installed.packages('devtools')
library(devtools)
installed.packages('devtools')
install.packages('devtools')
library(synapseClient)
synapseLogin()
id = 'syn3156404'
myFolder = synGet(id)
id = 'syn3156403'
myFolder = synStore(Folder('Analysis', parentId=id)
)
id = 'syn3156403'
myFolder = synStore(Folder(name='Analysis', parentId=id))
wiki = WikiPage(owner=myFolder, title="Analysis summary", markdown=placeholderText)
wiki = synStore(wiki)
placeholderText = "Place-holder text: Credibly innovate granular internal or organic sources whereas high standards in web-readiness. Energistically scale future-proof core competencies vis-a-vis impactful experiences. Dramatically synthesize integrated schemas with optimal networks."
wiki = WikiPage(owner=myFolder, title="Analysis summary", markdown=placeholderText)
wiki = synStore(wiki)
x = rnorm(500,mean=6,sd=4)
y = rnorm(500,mean=2,sd=3)
png(file="demo_plot.png")
par(mfrow = c(1,2))
hist(x, col = "red", xlim = range(-10,15))
hist(y, col = "blue", xlim = range(-10,15))
dev.off()
myFolder$id
myFolder$properties$id
plotFileEntity = File(path="demo_plot.png", parentId=myFolder$properties$id)
synSetAnnotations(plotFileEntity) = list(sampleType="iPSC", institution="FredHutch", protocol="A43.6")
plotFileEntity = synStore(plotFileEntity)
plotFileEntity = synStore(plotFileEntity,
executed='https://github.com/larssono/synapseTutorials/blob/master/R/1.Synapse_R_API_demo.Rmd',
activityName="plot distributions",
activityDescription="Generate histograms for demo",forceVersion=F)
library(devtools)
source_gist("https://gist.github.com/brian-bot/6117476")
thisFile <- "~/synapseTutorials/R/1.Synapse_R_API_demo.Rmd"
knit2synapse(thisFile, myFolder, overwrite = T)
knit2synapse(thisFile, plotFileEntity, overwrite = T)
knit2synapse(thisFile, plotFileEntity, overwrite = T)
onWeb(plotFileEntity)
clear()
library(synapseClient)
synapseLogin()
id = 'syn3156403'
myFolder = synStore(Folder(name='Analysis', parentId=id))
placeholderText = "Place-holder text: Credibly innovate granular internal or organic sources whereas high standards in web-readiness. Energistically scale future-proof core competencies vis-a-vis impactful experiences. Dramatically synthesize integrated schemas with optimal networks."
wiki = WikiPage(owner=myFolder, title="Analysis summary", markdown=placeholderText)
wiki = synStore(wiki)
x = rnorm(500,mean=6,sd=4)
y = rnorm(500,mean=2,sd=3)
png(file="demo_plot.png")
par(mfrow = c(1,2))
hist(x, col = "red", xlim = range(-10,15))
hist(y, col = "blue", xlim = range(-10,15))
dev.off()
plotFileEntity = File(path="demo_plot.png", parentId=myFolder$properties$id)
synSetAnnotations(plotFileEntity) = list(sampleType="iPSC", institution="FredHutch", protocol="A43.6")
plotFileEntity = synStore(plotFileEntity)
plotFileEntity = synStore(plotFileEntity,
executed='https://github.com/larssono/synapseTutorials/blob/PEC_demo/R/1.Synapse_R_API_demo.Rmd',
activityName="plot distributions",
activityDescription="Generate histograms for demo",forceVersion=F)
library(devtools)
source_gist("https://gist.github.com/brian-bot/6117476")
thisFile <- "~/synapseTutorials/R/1.Synapse_R_API_demo.Rmd"
knit2synapse(thisFile, plotFileEntity, overwrite = T)
library(synapseClient)
synapseLogin()
library(synapseClient)
synapseLogin()
source('http://depot.sagebase.org/CRAN.R')
pkgInstall("synapseClient")
install.packages(package, repos = c(sageRepo, "http://cran.r-project.org"),
)
source('http://depot.sagebase.org/CRAN.R')
pkgInstall("synapseClient")
library(synapseClient)
synapseLogin()
id = 'syn4217886'
myFolder = synStore(Folder(name='Analysis', parentId=id))
placeholderText = "#Lorem ipsum
Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
wiki = WikiPage(owner=myFolder, title="Analysis summary", markdown=placeholderText)
wiki = synStore(wiki)
onWeb(myFolder)
x = rnorm(500,mean=6,sd=4)
y = rnorm(500,mean=2,sd=3)
png(file="demo_plot.png")
par(mfrow = c(1,2))
hist(x, col = "red", xlim = range(-10,15))
dev.off()
plotFileEntity = File(path="demo_plot.png", parentId=myFolder$properties$id)
synSetAnnotations(plotFileEntity) = list(sampleType="iPSC", institution="FredHutch", protocol="A43.6")
plotFileEntity = synStore(plotFileEntity)
plotFileEntity = synStore(plotFileEntity,
executed='https://github.com/Sage-Bionetworks/PsychENCODE/exampleSynapseUpload/Synapse_R_API_demo.Rmd',
activityName="plot distributions",
activityDescription="Generate histograms for demo",forceVersion=F)
```
synDelete(myFolder)
library(devtools)
install.packages(devtools)
install.packages(devtools)
install.packages('devtools')
install.packages("devtools")
library(devtools)
source_gist("https://gist.github.com/brian-bot/6117476")
setwd("~/Dropbox/Sage/PEC/PsychENCODE/exampleSynapseUpload")
thisFile <- "./Synapse_R_API_demo.Rmd"
knit2synapse(thisFile, plotFileEntity, overwrite = T)
library(synapseClient)
synapseLogin()
id = 'syn4217886'
myFolder = Folder(name='Analysis', parentId=id)
myFolder = synStore(myFolder)
myFolder = Folder(name='Analysis', parentId=id)
myFolder = synStore(myFolder)
myFolder = synStore(Folder(name='Analysis', parentId=id))
library(synapseClient)
synapseLogin()
id = 'syn4217886'
myFolder = synStore(Folder(name='Analysis', parentId=id))
myFolder
id
